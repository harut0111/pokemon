{"version":3,"sources":["api/index.ts","components/PokemonSearch.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Api","searchValue","fetch","response","ok","json","Error","status","PokemonSearch","props","React","useState","setSearchValue","error","name","numberOfAbilites","baseExperience","imageUrl","searchState","setSearchState","loading","setLoading","fetchPokemon","a","Promise","res","setTimeout","getPokemon","data","console","log","abilities","length","base_experience","sprites","back_default","memorizedFetchPokemon","useCallback","useEffect","numberOfPokemons","style","color","height","src","alt","className","width","type","onChange","e","target","value","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAWqBA,E,sIACnB,WAAwBC,GAAxB,uFACyBC,MAAM,GAAD,OAbhB,oCAagB,YAAeD,IAD7C,YACQE,EADR,QAEeC,GAFf,gCAEgCD,EAASE,OAFzC,qDAGQ,IAAIC,MAAJ,iCAAoCH,EAASI,SAHrD,2C,8DCmEaC,EA1EO,SAACC,GAAiB,IAAD,EACCC,IAAMC,SAAS,KADhB,mBAC9BV,EAD8B,KACjBW,EADiB,OAWCF,IAAMC,SAR5B,CACdE,OAAO,EACPC,KAAM,GACNC,iBAAkB,EAClBC,eAAgB,EAChBC,SAAU,KARyB,mBAW9BC,EAX8B,KAWjBC,EAXiB,OAYPT,IAAMC,UAAS,GAZR,mBAY9BS,EAZ8B,KAYrBC,EAZqB,cActBC,IAdsB,2EAcrC,4BAAAC,EAAA,6DACEF,GAAW,GADb,kBAIU,IAAIG,SAAQ,SAACC,GAAD,OAASC,YAAW,kBAAMD,EAAI,QAAO,QAJ3D,uBAKuBzB,EAAI2B,WAAW1B,GALtC,OAKU2B,EALV,OAMIC,QAAQC,IAAR,OAAoBF,GACpBT,EAAe,CACbN,OAAO,EACPC,KAAMc,EAAKd,KACXC,iBAAkBa,EAAKG,UAAUC,OACjChB,eAAgBY,EAAKK,gBACrBhB,SAAUW,EAAKM,QAAQC,eAZ7B,kDAeIhB,EAAe,2BAAKD,GAAN,IAAmBL,OAAO,KAf5C,yBAiBIQ,GAAW,GAjBf,8EAdqC,sBAmCrC,IAAMe,EAAwBC,sBAAYf,EAAc,IAExDZ,IAAM4B,WAAU,WACdF,MACC,CAACA,IAvCiC,IAyC7BtB,EAA2BL,EAA3BK,KAAMyB,EAAqB9B,EAArB8B,iBAEd,OACE,6BACE,mCACQzB,EADR,QACmByB,EADnB,aAGCrB,EAAYL,MACX,uBAAG2B,MAAO,CAAEC,MAAO,QAAnB,uCACErB,EACF,yBAAKoB,MAAO,CAAEE,OAAQ,UAAtB,eAEA,6BACE,yBACEC,IAAKzB,EAAYD,SACjB2B,IAAI,UACJC,UAAU,gBACVC,MAAM,QAER,2BACG5B,EAAYJ,KADf,QAC0BI,EAAYH,iBADtC,iBACsE,IACnEG,EAAYF,eAFf,4BAMJ,2BAAO+B,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAOrC,EAAeqC,EAAEC,OAAOC,UAC5D,4BAAQC,QAAS9B,EAAcuB,UAAU,aAAzC,YCzDSQ,G,MAXO,WAEpB,OACE,yBAAKR,UAAU,OACX,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAe/B,KAAK,WAAWyB,iBAAkB,SCGvCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6652783f.chunk.js","sourcesContent":["const API_URL = \"https://pokeapi.co/api/v2/pokemon\";\n\ninterface pokemonData {\n  name: string;\n  abilities: [];\n  base_experience: number;\n  sprites: {\n    back_default: string;\n  };\n}\n\nexport default class Api {\n  static async getPokemon(searchValue: string): Promise<pokemonData> {\n    const response = await fetch(`${API_URL}/${searchValue}`);\n    if (response.ok) return await response.json();\n    throw new Error(`An error has occurred: ${response.status}`);\n  }\n}\n","import React, { useCallback } from \"react\";\nimport User from \"../interfaces/User.interface\";\nimport SearchState from \"../interfaces/Search.state\";\nimport Api from \"../api\";\n\nconst PokemonSearch = (props: User) => {\n  const [searchValue, setSearchValue] = React.useState(\"1\");\n\n  const initial = {\n    error: false,\n    name: \"\",\n    numberOfAbilites: 0,\n    baseExperience: 0,\n    imageUrl: \"\",\n  };\n\n  const [searchState, setSearchState] = React.useState<SearchState>(initial);\n  const [loading, setLoading] = React.useState(false);\n\n  async function fetchPokemon() {\n    setLoading(true);\n    try {\n      // simulate delay\n      await new Promise((res) => setTimeout(() => res(null), 1000));\n      const data = await Api.getPokemon(searchValue);\n      console.log(`data`, data);\n      setSearchState({\n        error: false,\n        name: data.name,\n        numberOfAbilites: data.abilities.length,\n        baseExperience: data.base_experience,\n        imageUrl: data.sprites.back_default,\n      });\n    } catch (error) {\n      setSearchState({ ...searchState, error: true });\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const memorizedFetchPokemon = useCallback(fetchPokemon, []);\n\n  React.useEffect(() => {\n    memorizedFetchPokemon();\n  }, [memorizedFetchPokemon]);\n\n  const { name, numberOfPokemons } = props;\n\n  return (\n    <div>\n      <p>\n        User {name} has {numberOfPokemons} pokemons\n      </p>\n      {searchState.error ? (\n        <p style={{ color: \"red\" }}>Pokemon not found, please try again</p>\n      ) : loading ? (\n        <div style={{ height: \"100px\" }}>Loading ...</div>\n      ) : (\n        <div>\n          <img\n            src={searchState.imageUrl}\n            alt=\"pokemon\"\n            className=\"pokemon-image\"\n            width=\"100\"\n          />\n          <p>\n            {searchState.name} has {searchState.numberOfAbilites} abilities and{\" \"}\n            {searchState.baseExperience} base experience points\n          </p>\n        </div>\n      )}\n      <input type=\"text\" onChange={(e) => setSearchValue(e.target.value)} />\n      <button onClick={fetchPokemon} className=\"my-button\">\n        Search\n      </button>\n    </div>\n  );\n};\n\nexport default PokemonSearch;\n","import React from 'react';\nimport PokemonSearch from './components/PokemonSearch'\nimport './App.css';\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n        <div className='App-header'>\n          <PokemonSearch name=\"John Doe\" numberOfPokemons={12} />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}